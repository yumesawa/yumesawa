<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python读写、创建文件</title>
      <link href="/2019/11/14/python%E8%AF%BB%E5%86%99%E3%80%81%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/"/>
      <url>/2019/11/14/python%E8%AF%BB%E5%86%99%E3%80%81%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/juandx/p/4962089.html" target="_blank" rel="noopener"><strong>python</strong> <strong>读写、创建</strong> <strong>文件</strong></a></p><p><strong>python中对文件、文件夹（文件操作函数）的操作需要涉及到os模块和shutil模块。</strong></p><p>得到当前工作目录，即当前Python脚本工作的目录路径: <strong>os.getcwd()</strong></p><p>返回指定目录下的所有文件和目录名:<strong>os.listdir()</strong></p><p>函数用来删除一个文件:<strong>os.remove()</strong></p><p>删除多个目录：<strong>os.removedirs ** **（r“c：\python”）</strong></p><p>检验给出的路径是否是一个文件：<strong>os.path.isfile()</strong></p><p>检验给出的路径是否是一个目录：<strong>os.path.isdir()</strong></p><p>判断是否是绝对路径：<strong>os.path.isabs()</strong></p><p>检验给出的路径是否真地存:<strong>os.path.exists()</strong></p><p>返回一个路径的目录名和文件名:<strong>os.path.split()</strong>     eg os.path.split(‘/home/swaroop/byte/code/poem.txt’) 结果：(‘/home/swaroop/byte/code’, ‘poem.txt’) </p><p>分离扩展名：<strong>os.path.splitext()</strong></p><p>获取路径名：<strong>os.path.dirname()</strong></p><p>获取文件名：<strong>os.path.basename()</strong></p><p>运行shell命令: <strong>os.system()</strong></p><p>读取和设置环境变量:<strong>os.getenv()与os.putenv()</strong></p><p>给出当前平台使用的行终止符:<strong>os.linesep</strong>    Windows使用’\r\n’，Linux使用’\n’而Mac使用’\r’</p><p>指示你正在使用的平台：<strong>os.name</strong>       对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’</p><p>重命名：<strong>os.rename</strong> <strong>（old，new）</strong></p><p>创建多级目录：<strong>os.makedirs</strong> <strong>（r“c：\python\test”）</strong></p><p>创建单个目录：<strong>os.mkdir</strong> <strong>（“test”）</strong></p><p>获取文件属性：<strong>os.stat</strong> <strong>（file）</strong></p><p>修改文件权限与时间戳：<strong>os.chmod</strong> <strong>（file）</strong></p><p>终止当前进程：<strong>os.exit</strong> <strong>（）</strong></p><p>获取文件大小：<strong>os.path.getsize</strong> <strong>（filename）</strong></p><p> <strong>文件操作：</strong><br> <strong>os.mknod(“test.txt”)</strong>        创建空文件<br> <strong>fp = open(“test.txt”,w)</strong>     直接打开一个文件，如果文件不存在则创建文件</p><p>关于open 模式：</p><p>w     以写方式打开，<br> a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)<br> r+     以读写模式打开<br> w+     以读写模式打开 (参见 w )<br> a+     以读写模式打开 (参见 a )<br> rb     以二进制读模式打开<br> wb     以二进制写模式打开 (参见 w )<br> ab     以二进制追加模式打开 (参见 a )<br> rb+    以二进制读写模式打开 (参见 r+ )<br> wb+    以二进制读写模式打开 (参见 w+ )<br> ab+    以二进制读写模式打开 (参见 a+ )</p><p><strong>fp.read([size])</strong>                     #size为读取的长度，以byte为单位</p><p><strong>fp.readline([size])</strong>                 #读一行，如果定义了size，有可能返回的只是一行的一部分</p><p><strong>fp.readlines([size])</strong>                #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。</p><p><strong>fp.write(str)</strong>                      #把str写到文件中，write()并不会在str后加上一个换行符</p><p><strong>fp.writelines(seq)</strong>            #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。</p><p><strong>fp.close()</strong>                        #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError</p><p><strong>fp.flush()</strong>                                      #把缓冲区的内容写入硬盘</p><p><strong>fp.fileno()</strong>                                      #返回一个长整型的”文件标签“</p><p><strong>fp.isatty()</strong>                                      #文件是否是一个终端设备文件（unix系统中的）</p><p><strong>fp.tell()</strong>                                         #返回文件操作标记的当前位置，以文件的开头为原点</p><p><strong>fp.next()</strong>                                       #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。</p><p><strong>fp.seek(offset[,whence])</strong>              #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。</p><p><strong>fp.truncate([size])</strong>                       #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</p><p><strong>目录操作：</strong><br> <strong>os.mkdir(“file”)</strong>                   创建目录<br> 复制文件：<br> <strong>shutil.copyfile(“oldfile”,”newfile”)</strong>       oldfile和newfile都只能是文件<br> <strong>shutil.copy(“oldfile”,”newfile”)</strong>            oldfile只能是文件夹，newfile可以是文件，也可以是目标目录<br> 复制文件夹：<br> <strong>shutil.copytree(“olddir”,”newdir”)</strong>        olddir和newdir都只能是目录，且newdir必须不存在<br> 重命名文件（目录）<br> <strong>os.rename(“oldname”,”newname”)</strong>       文件或目录都是使用这条命令<br> 移动文件（目录）<br> <strong>shutil.move(“oldpos”,”newpos”)</strong><br> 删除文件<br> <strong>os.remove(“file”)</strong><br> 删除目录<br> <strong>os.rmdir(“dir”)</strong>只能删除空目录<br> <strong>shutil.rmtree(“dir”)</strong>    空目录、有内容的目录都可以删<br> 转换目录<br> <strong>os.chdir(“path”)</strong>   换路径</p><p>Python读写文件<br> 1.open<br> 使用open打开文件后一定要记得调用文件对象的close()方法。比如可以用try/finally语句来确保最后能关闭文件。</p><p>file_object = open(‘thefile.txt’)<br> try:<br>      all_the_text = file_object.read( )<br> finally:<br>      file_object.close( )</p><p>注：不能把open语句放在try块里，因为当打开文件出现异常时，文件对象file_object无法执行close()方法。</p><p>2.读文件<br> 读文本文件<br> input = open(‘data’, ‘r’)<br> #第二个参数默认为r<br> input = open(‘data’)</p><p>读二进制文件<br> input = open(‘data’, ‘rb’)</p><p>读取所有内容<br> file_object = open(‘thefile.txt’)<br> try:<br>      all_the_text = file_object.read( )<br> finally:<br>      file_object.close( )</p><p>读固定字节<br> file_object = open(‘abinfile’, ‘rb’)<br> try:<br>     while True:<br>          chunk = file_object.read(100)<br>         if not chunk:<br>             break<br>          do_something_with(chunk)<br> finally:<br>      file_object.close( )</p><p>读每行<br> list_of_all_the_lines = file_object.readlines( )</p><p>如果文件是文本文件，还可以直接遍历文件对象获取每行：</p><p>for line in file_object:<br>      process line</p><p>3.写文件<br> 写文本文件<br> output = open(‘data’, ‘w’)</p><p>写二进制文件<br> output = open(‘data’, ‘wb’)</p><p>追加写文件<br> output = open(‘data’, ‘w+’)</p><p>写数据<br> file_object = open(‘thefile.txt’, ‘w’)<br> file_object.write(all_the_text)<br> file_object.close( )</p><p>写入多行<br> file_object.writelines(list_of_text_strings)</p><p>注意，调用writelines写入多行在性能上会比使用write一次性写入要高。</p><p>在处理日志文件的时候，常常会遇到这样的情况：日志文件巨大，不可能一次性把整个文件读入到内存中进行处理，例如需要在一台物理内存为 2GB 的机器上处理一个 2GB 的日志文件，我们可能希望每次只处理其中 200MB 的内容。<br> 在 Python 中，内置的 File 对象直接提供了一个 readlines(sizehint) 函数来完成这样的事情。以下面的代码为例：</p><p>file = open(‘test.log’, ‘r’)sizehint = 209715200   # 200Mposition = 0lines = file.readlines(sizehint)while not file.tell() - position &lt; 0:       position = file.tell()       lines = file.readlines(sizehint)</p><p>每次调用 readlines(sizehint) 函数，会返回大约 200MB 的数据，而且所返回的必然都是完整的行数据，大多数情况下，返回的数据的字节数会稍微比 sizehint 指定的值大一点（除最后一次调用 readlines(sizehint) 函数的时候）。通常情况下，Python 会自动将用户指定的 sizehint 的值调整成内部缓存大小的整数倍。</p><p>file在python是一个特殊的类型，它用于在python程序中对外部的文件进行操作。在python中一切都是对象，file也不例外，file有file的方法和属性。下面先来看如何创建一个file对象：</p><p> file(name[, mode[, buffering]])<br> file()函数用于创建一个file对象，它有一个别名叫open()，可能更形象一些，它们是内置函数。来看看它的参数。它参数都是以字符串的形式传递的。name是文件的名字。<br> mode是打开的模式，可选的值为r w a U，分别代表读（默认） 写 添加支持各种换行符的模式。用w或a模式打开文件的话，如果文件不存在，那么就自动创建。此外，用w模式打开一个已经存在的文件时，原有文件的内容会被清空，因为一开始文件的操作的标记是在文件的开头的，这时候进行写操作，无疑会把原有的内容给抹掉。由于历史的原因，换行符在不同的系统中有不同模式，比如在 unix中是一个\n，而在windows中是‘\r\n’，用U模式打开文件，就是支持所有的换行模式，也就说‘\r’ ‘\n’ ‘\r\n’都可表示换行，会有一个tuple用来存贮这个文件中用到过的换行符。不过，虽说换行有多种模式，读到python中统一用\n代替。在模式字符的后面，还可以加上+ b t这两种标识，分别表示可以对文件同时进行读写操作和用二进制模式、文本模式（默认）打开文件。<br> buffering如果为0表示不进行缓冲;如果为1表示进行“行缓冲“;如果是一个大于1的数表示缓冲区的大小，应该是以字节为单位的。</p><p>file对象有自己的属性和方法。先来看看file的属性。</p><p> closed #标记文件是否已经关闭，由close()改写<br> encoding #文件编码<br> mode #打开模式<br> name #文件名<br> newlines #文件中用到的换行模式，是一个tuple<br> softspace #boolean型，一般为0，据说用于print</p><p>file的读写方法：</p><p> F.close()  #关闭文件。</p><p>python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。如果一个文件在关闭后还对其进行操作会产生ValueError 。</p><p> F.flush()  #把缓冲区的内容写入硬盘</p><p> F.fileno()  #返回一个长整型的”文件标签“ </p><p>F.isatty() #文件是否是一个终端设备文件（unix系统中的）</p><p> F.tell() #返回文件操作标记的当前位置，以文件的开头为原点</p><p> F.next()  #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。</p><p> F.seek(offset[,whence]) #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。</p><p> F.truncate([size])  #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的并发控制</title>
      <link href="/2019/11/14/MySQL%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/11/14/MySQL%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>import time<br>DEBUG = 0  # 在需要分析时效性的时候将该量置为1，否则置为0</p><p>def print_func_time(function):<br>    “””<br>    计算程序运行时间<br>    :param function:<br>    :return:<br>    “””<br>    def f(<em>args, *</em>kwargs):<br>        if DEBUG:<br>            t0 = time.time()<br>            result = function(<em>args, *</em>kwargs)<br>            t1 = time.time()<br>            spend = t1 - t0<br>            print(“运行耗时%.3f 秒：函数%s” % (spend, function.<strong>name</strong>))<br>        else:<br>            result = function(<em>args, *</em>kwargs)<br>        return result<br>    return f</p><p>@print_func_time<br>def test():<br>    print(123)</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    t00 = time.time()<br>    test()<br>    t10 = time.time()<br>    spend1 = t10 - t00<br>    print(“运行耗时%.7f秒” % spend1)</p><h4 id="MySQL的并发控制"><a href="#MySQL的并发控制" class="headerlink" title="MySQL的并发控制"></a>MySQL的并发控制</h4><p>多个查询需要在同一时刻修改数据，会产生并发控制问题。<br>例如：两个进程在同一时刻对同一个邮箱进行投递邮件，会发生什么情况呢？显然，邮箱的数据会被损坏，两封邮件的内容会交叉地附加在邮箱文件的末尾。设计良好的邮箱投递系统会通过锁来防止数据损坏。但这并不支持并发处理。因为人以时刻只有一个进程可以修改邮箱数据。</p><p>并发控制这里主要介绍两个概念，一个是读写锁，一个是锁的粒度。</p><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p>若只是单纯的从邮箱中读取数据，则不会产生什么问题，若是在读取的过程中有一个用户试图去删除编号为25的邮件，这时可能读取邮件的用户会报错退出，也可能读到不准确的数据。解决这类问题的方法就是使用读写锁。其中读锁也叫共享锁，写锁叫排它锁。本节呢先不讨论具体的实现方式，只是简单介绍下读写锁的概念。</p><h4 id="读锁（共享锁）"><a href="#读锁（共享锁）" class="headerlink" title="读锁（共享锁）"></a>读锁（共享锁）</h4><p>读锁又称为共享锁，相互之间不堵塞。多个请求可以在同一个资源目标进行读取，互相不干扰。</p><h4 id="写锁（排它锁）"><a href="#写锁（排它锁）" class="headerlink" title="写锁（排它锁）"></a>写锁（排它锁）</h4><p>写锁会阻塞其他的写锁和读锁，这样的话可以保证在同一时间里只有同一个用户能执行写入的操作，防止其他用户读取正在写入的同一资源。<br>在世纪的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL会通过锁定防止其他用户读取同一数据。大多数时候，MySQL锁的内部管理都是透明的。</p><h4 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h4><p>锁粒度让提高共享资源的并发性更有选择性。尽量只锁定需要修改的部分数据。理想的方式就是只会对修改的数据片进行精确的锁定。这里不是说锁定的数量越少，则系统的并发程度越高，只要相互之间不发生冲突即可，还要考虑加锁消耗的资源问题（获得锁、检查锁是否已经解除、释放锁等），因为加锁的同时也会增加系统的开销，如果是花费大量时间来管理锁，而不是存取数据，那么系统的性能可能会因此受到影响。</p><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>MySQL独立于存储引擎提供表锁，例如，对于ALTER TABLE语句，服务器提供表锁(table-level lock)。</p><p>表锁是MySQL中最基本的锁策略，并且是开销最小的策略。当一个表要插入、删除、更新记录时，首先需要获得写锁，这会阻塞其他用户对该表的读写操作。只有没有写锁的时候，其他用户才能进行读取的操作。读锁之间是不进行相互阻塞的。（写锁优先级高于读锁，写锁的请求可能会被插入到读锁队列的前面）</p><h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><p>InnoDB和Falcon存储引擎提供行级锁，此外，BDB支持页级锁。</p><p>行级锁可以最大程度地支持并发处理，同时也带来了最大的锁开销问题。行级锁只在存储引擎中进行实现，服务层完全不了解存储引擎中的实现。</p><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><ul><li>MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 insert,update,delete 语句</li></ul><p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p><ul><li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><h2 id="二、事务的并发问题"><a href="#二、事务的并发问题" class="headerlink" title="二、事务的并发问题"></a>二、事务的并发问题</h2><p><a href="https://blog.csdn.net/w_linux/article/details/79666086" target="_blank" rel="noopener">https://blog.csdn.net/w_linux/article/details/79666086</a></p><p>　　*<em>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据 *</em></p><p>　　<strong>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</strong></p><p>　　<strong>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</strong></p><p>　　<strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><h4 id="三、MySQL事务隔离级别"><a href="#三、MySQL事务隔离级别" class="headerlink" title="三、MySQL事务隔离级别"></a>三、MySQL事务隔离级别</h4><table><thead><tr><th align="left">事务隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td align="left">读未提交（read-uncommitted）</td><td align="left">是</td><td align="left">是</td><td>是</td></tr><tr><td align="left">不可重复读（read-committed）</td><td align="left">否</td><td align="left">是</td><td>是</td></tr><tr><td align="left">可重复读（repeatable-read）</td><td align="left">否</td><td align="left">否</td><td>是</td></tr><tr><td align="left">串行化（serializable）</td><td align="left">否</td><td align="left">否</td><td>否</td></tr></tbody></table><p> MySQL的事务隔离级别</p><p><strong>1、读未提交</strong>：能读到未提交的数据。</p><p><strong>2、读已提交</strong>：读已提交的数据。</p><p><strong>3、可重复读</strong>：mysql默认，查询的都是事务开始时的数据。</p><p><strong>4、串行读</strong>：完全串行化读，每次都会锁表，读写互相阻塞。</p><h3 id="MySQL的事务隔离级别"><a href="#MySQL的事务隔离级别" class="headerlink" title="MySQL的事务隔离级别"></a>MySQL的事务隔离级别</h3><p><strong>1、读未提交</strong>：能读到未提交的数据。</p><p><strong>2、读已提交</strong>：读已提交的数据。</p><p><strong>3、可重复读</strong>：mysql默认，查询的都是事务开始时的数据。</p><p><strong>4、串行读</strong>：完全串行化读，每次都会锁表，读写互相阻塞。</p><h4 id="死锁产生"><a href="#死锁产生" class="headerlink" title="死锁产生"></a>死锁产生</h4><ul><li><p>所谓死锁<DeadLock>：是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用，它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。表级锁不会产生死锁.所以解决死锁主要还是针对于最常用的InnoDB。</p></li><li><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。</p></li></ul><p>​           当事务试图以不同的顺序锁定资源时，就可能产生死锁。      多个事务同时锁定同一个资源时也可能会产生死锁。</p><p>​             锁的行为和顺序和存储引擎相关。以同样的顺序执行语句，有些存储引擎会产生死锁有些不会——死锁有双重原因：真正的数据冲突；存储引擎的实现方式。</p><h4 id="检测死锁"><a href="#检测死锁" class="headerlink" title="检测死锁"></a>检测死锁</h4><p>数据库系统实现了各种死锁检测和死锁超时的机制。InnoDB存储引擎能检测到死锁的循环依赖并立即返回一个错误。</p><p>InnoDB目前处理死锁的方法是,将持有最少行级排他锁的事务进行回滚(这是相对比较简单的死锁回滚算法)。</p><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>事务日志可以帮助提高事务的效率。使用事务日志,存储引擎在修改表的数据时只需要修改其内存拷贝,再把该修改行为记录到持久在硬盘上的事务日志中,而不用每次都将修改的数据本身持久到磁盘。</p><p>事务日志采用的是追加的方式,因此写日志的操作是磁盘上一小块区域内的顺序I/O,1而不像随机I/O需要在磁盘的多个地方移动磁头,所以采用 “事务日志的方式相对来说要快得多。事多日志持久以后,内存中被修改的数据在后台可以慢慢地刷回到磁盘。目前大多数存储引擎都是这样实现的,我们通常称之为预写式日志(Write-Ahead Logging),修改数据需要写两次磁盘。</p><p>如果数据的修改已经记录到事务日志并持久化,但数据本身还没有写回磁盘,此时系统崩溃,存储引擎在重启时能够自动恢复这部分修改的数据。具体的恢复t式则视存储引擎而定。</p><p><strong>说到事务日志，不得不说的就是redo和undo。</strong></p><p>1.redo log<br>       在innoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志先行”(Write-Ahead Logging)。当事务提交之后，在Buffer Pool中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统重启进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态。未完成的事务，可以继续提交，也可以选择回滚，这基于恢复的策略而定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在系统启动的时候，就已经为redo log分配了一块连续的存储空间,以顺序追加的方式记录Redo Log,通过顺序IO来改善性能。所有的事务共享redo log的存储空间，它们的Redo Log按语句的执行顺序，依次交替的记录在一起。如下一个简单示例：</span><br><span class="line"></span><br><span class="line">记录1：&lt;trx1, insert...&gt;</span><br><span class="line"></span><br><span class="line">记录2：&lt;trx2, delete...&gt;</span><br><span class="line"></span><br><span class="line">记录3：&lt;trx3, update...&gt;</span><br><span class="line"></span><br><span class="line">记录4：&lt;trx1, update...&gt;</span><br><span class="line"></span><br><span class="line">记录5：&lt;trx3, insert...&gt;</span><br></pre></td></tr></table></figure><p>2.undo log<br>        undo log主要为事务的回滚服务。在事务执行的过程中，除了记录redo log，还会记录一定量的undo log。undo log记录了数据在每个操作前的状态，如果事务执行过程中需要回滚，就可以根据undo log进行回滚操作。单个事务的回滚，只会回滚当前事务做的操作，并不会影响到其他的事务做的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">以下是undo+redo事务的简化过程</span><br><span class="line"></span><br><span class="line">假设有2个数值，分别为A和B,值为1，2</span><br><span class="line"></span><br><span class="line">1. start transaction;</span><br><span class="line"></span><br><span class="line">2. 记录 A=1 到undo log;</span><br><span class="line"></span><br><span class="line">3. update A = 3；</span><br><span class="line"></span><br><span class="line">4. 记录 A=3 到redo log；</span><br><span class="line"></span><br><span class="line">5. 记录 B=2 到undo log；</span><br><span class="line"></span><br><span class="line">6. update B = 4；</span><br><span class="line"></span><br><span class="line">7. 记录B = 4 到redo log；</span><br><span class="line"></span><br><span class="line">8. 将redo log刷新到磁盘</span><br><span class="line"></span><br><span class="line">9. commit</span><br><span class="line"></span><br><span class="line">在1-8的任意一步系统宕机，事务未提交，该事务就不会对磁盘上的数据做任何影响。如果在8-9之间宕机，恢复之后可以选择回滚，也可以选择继续完成事务提交，因为此时redo log已经持久化。若在9之后系统宕机，内存映射中变更的数据还来不及刷回磁盘，那么系统恢复之后，可以根据redo log把数据刷回磁盘。</span><br></pre></td></tr></table></figure><h3 id="MySQL中的事务"><a href="#MySQL中的事务" class="headerlink" title="MySQL中的事务"></a>MySQL中的事务</h3><p>MysQL提供了两种事务型的存储引擎: InnoDB和NDB Cluster,</p><p>另外还有一些第三方存储引擎也支持事务,比较知名的包括XtraDB和PBXT.</p><ul><li>自动提交(AUTOCOMMIT)</li><li>在事务中混合使用存储引擎</li><li>隐式和显式锁定</li></ul><h2 id="MySQL中多版本并发控制-MVCC"><a href="#MySQL中多版本并发控制-MVCC" class="headerlink" title="MySQL中多版本并发控制(MVCC)"></a>MySQL中多版本并发控制(MVCC)</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MVCC（Multi-Version Concurrency Control）即多版本并发控制。<br> MySQL的大多数事务型（如InnoDB,Falcon等）存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，他们一般都同时实现了MVCC。当前不仅仅是MySQL,其它数据库系统（如Oracle,PostgreSQL）也都实现了MVCC。值得注意的是MVCC并没有一个统一的实现标准，所以不同的数据库，不同的存储引擎的实现都不尽相同。</p><h3 id="MVCC优缺点"><a href="#MVCC优缺点" class="headerlink" title="MVCC优缺点"></a>MVCC优缺点</h3><p>MVCC在大多数情况下代替了行锁，实现了对读的非阻塞，读不加锁，读写不冲突。缺点是每行记录都需要额外的存储空间，需要做更多的行维护和检查工作。</p><h2 id="MVCC的实现原理"><a href="#MVCC的实现原理" class="headerlink" title="MVCC的实现原理"></a>MVCC的实现原理</h2><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h4><p>为了便于理解MVCC的实现原理，这里简单介绍一下undo log的工作过程</p><p>在不考虑redo log 的情况下利用undo log工作的简化过程为：</p><table><thead><tr><th>序号</th><th>动作</th></tr></thead><tbody><tr><td>1</td><td>开始事务</td></tr><tr><td>2</td><td>记录数据行数据快照到undo log</td></tr><tr><td>3</td><td>更新数据</td></tr><tr><td>4</td><td>将undo log写到磁盘</td></tr><tr><td>5</td><td>将数据写到磁盘</td></tr><tr><td>6</td><td>提交事务</td></tr></tbody></table><blockquote><p>1）为了保证数据的持久性数据要在事务提交之前持久化<br> 2）undo log的持久化必须在在数据持久化之前，这样才能保证系统崩溃时，可以用undo log来回滚事务</p></blockquote><h3 id="Innodb中的隐藏列"><a href="#Innodb中的隐藏列" class="headerlink" title="Innodb中的隐藏列"></a>Innodb中的隐藏列</h3><p>Innodb通过undo log保存了已更改行的旧版本的信息的快照。<br> InnoDB的内部实现中为每一行数据增加了三个隐藏列用于实现MVCC。</p><table><thead><tr><th align="left">列名</th><th align="center">长度(字节)</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">DB_TRX_ID</td><td align="center">6</td><td align="left">插入或更新行的最后一个事务的事务标识符。（删除视为更新，将其标记为已删除）</td></tr><tr><td align="left">DB_ROLL_PTR</td><td align="center">7</td><td align="left">写入回滚段的撤消日志记录（若行已更新，则撤消日志记录包含在更新行之前重建行内容所需的信息）</td></tr><tr><td align="left">DB_ROW_ID</td><td align="center">6</td><td align="left">行标识（隐藏单调自增id）</td></tr></tbody></table><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><table><thead><tr><th>数据列</th><th>..</th><th>DB_ROW_ID</th><th>DB_TRX_ID</th><th>DB_ROLL_PTR</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="MVCC工作过程"><a href="#MVCC工作过程" class="headerlink" title="MVCC工作过程"></a>MVCC工作过程</h2><blockquote><p>MVCC只在READ COMMITED 和 REPEATABLE READ 两个隔离级别下工作。READ UNCOMMITTED总是读取最新的数据行，而不是符合当前事务版本的数据行。而SERIALIZABLE 则会对所有读取的行都加锁</p></blockquote><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p>InnoDB 会根据两个条件来检查每行记录：</p><ul><li>InnoDB只查找版本(DB_TRX_ID)早于当前事务版本的数据行（行的系统版本号&lt;=事务的系统版本号,这样可以确保数据行要么是在开始之前已经存在了，要么是事务自身插入或修改过的）</li><li>行的删除版本号(DB_ROLL_PTR)要么未定义（未更新过），要么大于当前事务版本号（在当前事务开始之后更新的）。这样可以确保事务读取到的行，在事务开始之前未被删除。</li></ul><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>InnoDB为新插入的每一行保存当前系统版本号作为行版本号</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>InnoDB为删除的每一行保存当前的系统版本号作为行删除标识</p><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装python3</title>
      <link href="/2019/11/14/Linux%E5%AE%89%E8%A3%85python3/"/>
      <url>/2019/11/14/Linux%E5%AE%89%E8%A3%85python3/</url>
      
        <content type="html"><![CDATA[<p>CentOS7下安装python3 </p><h1 id="1、安装pyhton3-7-的依赖包"><a href="#1、安装pyhton3-7-的依赖包" class="headerlink" title="1、安装pyhton3.7 的依赖包"></a>1、安装pyhton3.7 的依赖包</h1><p>yum -y groupinstall “Development tools”<br>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel<br>readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel </p><h1 id="2、下载python3-7的“源码”："><a href="#2、下载python3-7的“源码”：" class="headerlink" title="2、下载python3.7的“源码”："></a>2、下载python3.7的“源码”：</h1><p>wget <a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz</a> </p><h1 id="3、解压并编译安装："><a href="#3、解压并编译安装：" class="headerlink" title="3、解压并编译安装："></a>3、解压并编译安装：</h1><p>tar -xJvf Python-3.7.0.tar.xz </p><h1 id="4、用cd命令进入解压出来的Python文件夹"><a href="#4、用cd命令进入解压出来的Python文件夹" class="headerlink" title="4、用cd命令进入解压出来的Python文件夹"></a>4、用cd命令进入解压出来的Python文件夹</h1><p>cd Python-3.7.0 </p><h1 id="5、用-方法执行configure-并指定安装到usr目录下"><a href="#5、用-方法执行configure-并指定安装到usr目录下" class="headerlink" title="5、用./方法执行configure,并指定安装到usr目录下"></a>5、用./方法执行configure,并指定安装到usr目录下</h1><p>./configure –prefix=/usr/local/python3 –enable-shared </p><h1 id="6、开始编译安装"><a href="#6、开始编译安装" class="headerlink" title="6、开始编译安装"></a>6、开始编译安装</h1><p>make &amp;&amp; make install </p><h1 id="7、配置环境变量，-创建软链接"><a href="#7、配置环境变量，-创建软链接" class="headerlink" title="7、配置环境变量， 创建软链接"></a>7、配置环境变量， 创建软链接</h1><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python3 # 创建python3的软链接<br>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 # 创建pip的软链接 </p><h1 id="8、将编译目录下的libpython3-7m-so-1-0文件复制到"><a href="#8、将编译目录下的libpython3-7m-so-1-0文件复制到" class="headerlink" title="8、将编译目录下的libpython3.7m.so.1.0文件复制到"></a>8、将编译目录下的libpython3.7m.so.1.0文件复制到</h1><p>cp /root/Python-3.7.0/libpython3.7m.so.1.0 /usr/lib64/libpython3.7m.so.1.0 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git 自己的总结</title>
      <link href="/2019/11/14/git%20%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/14/git%20%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1先在码云官网创建自己的项目"><a href="#1先在码云官网创建自己的项目" class="headerlink" title="1先在码云官网创建自己的项目"></a>1先在码云官网创建自己的项目</h3><p>略</p><h3 id="2在桌面-拉去远端码云项目到本地"><a href="#2在桌面-拉去远端码云项目到本地" class="headerlink" title="2在桌面 拉去远端码云项目到本地:"></a>2在桌面 拉去远端码云项目到本地:</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//gitee.<span class="keyword">com</span>/edward_h/OnlineEducation.git</span><br></pre></td></tr></table></figure><h3 id="3新建分支-并关联远程分支方便以后上传项目文件-注意-有些个性化配置需要上传-比如vue项目的-node-modules"><a href="#3新建分支-并关联远程分支方便以后上传项目文件-注意-有些个性化配置需要上传-比如vue项目的-node-modules" class="headerlink" title="3新建分支,并关联远程分支方便以后上传项目文件,注意 有些个性化配置需要上传,比如vue项目的 node_modules"></a>3新建分支,并关联远程分支方便以后上传项目文件,注意 有些个性化配置需要上传,比如vue项目的 node_modules</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev    # 创建分支并切换到该分支</span><br></pre></td></tr></table></figure><h3 id="切换分支-（dev是分支名"><a href="#切换分支-（dev是分支名" class="headerlink" title="切换分支   （dev是分支名)"></a>切换分支   （dev是分支名)</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev    # 切换分支   （dev是分支名)  #这步不用建立分支了</span><br></pre></td></tr></table></figure><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="4-创建远程分支连接-此处为master分支"><a href="#4-创建远程分支连接-此处为master分支" class="headerlink" title="4.创建远程分支连接(此处为master分支)"></a>4.创建远程分支连接(此处为master分支)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master</span><br></pre></td></tr></table></figure><p>如果提示错误,则说明远程没有该分支,则需要创建该远程分支</p><p>创建完毕后,再执行4操作,关联远程分支</p><h3 id="5-执行添加项目操作-这两步操作必须同时存在"><a href="#5-执行添加项目操作-这两步操作必须同时存在" class="headerlink" title="5.执行添加项目操作,这两步操作必须同时存在"></a>5.执行添加项目操作,这两步操作必须同时存在</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span> -A 文件名   :添加修改文件 </span><br><span class="line"></span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">"提交的信息"</span>  将文件存进暂存区</span><br></pre></td></tr></table></figure><h3 id="6-此处拉下文件如果提示冲突-则解决完冲突-再次执行第五步操作-因为修改了冲突的代码-所以重新将代码添加到暂存区"><a href="#6-此处拉下文件如果提示冲突-则解决完冲突-再次执行第五步操作-因为修改了冲突的代码-所以重新将代码添加到暂存区" class="headerlink" title="6.此处拉下文件如果提示冲突,则解决完冲突,再次执行第五步操作,因为修改了冲突的代码,所以重新将代码添加到暂存区"></a>6.此处拉下文件如果提示冲突,则解决完冲突,再次执行第五步操作,因为修改了冲突的代码,所以重新将代码添加到暂存区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull     # 下拉最新文件</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span>  文件名   :将文件存进暂存区   </span><br><span class="line">git <span class="built_in">add</span> -A 提交所有修改</span><br><span class="line"></span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">"提交的信息"</span></span><br></pre></td></tr></table></figure><h3 id="7-直到不显示冲突则说明解决完冲突了-再提交"><a href="#7-直到不显示冲突则说明解决完冲突了-再提交" class="headerlink" title="7.直到不显示冲突则说明解决完冲突了,再提交"></a>7.直到不显示冲突则说明解决完冲突了,再提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push    # 上传文件</span><br></pre></td></tr></table></figure><p>不提示错误,则上传完毕</p><h3 id="8-可以查看上一次的修改操作是什么"><a href="#8-可以查看上一次的修改操作是什么" class="headerlink" title="8.可以查看上一次的修改操作是什么"></a>8.可以查看上一次的修改操作是什么</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="备用知识点-建项目着-如果想让其他人通过输入账号密码才能上传文件-则输入如下命令-这些命令用不到"><a href="#备用知识点-建项目着-如果想让其他人通过输入账号密码才能上传文件-则输入如下命令-这些命令用不到" class="headerlink" title="备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令  (这些命令用不到)"></a>备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令  (这些命令用不到)</h3><p>插入如下代码使项目中的组员每次修改数据都要输入账号和密码：</p><ul><li>git config –global user.name [username]</li><li>git config –global user.password [userpassword]</li><li>PS：想要保存密码，则需要插入如下代码： git config –global credential.helper store。</li></ul><p>###gitee推送到远程仓库时提示错误</p><p>remote: Incorrect username or password ( access token )</p><p>fatal: Authentication failed for ‘<a href="https://gitee.com/***/***.git/&#39;" target="_blank" rel="noopener">https://gitee.com/***/***.git/&#39;</a></p><p>解决办法：清除本地的gitee用户名和密码</p><p>git config –system –unset credential.helper</p><p>再执行推送，重新输入用户名和密码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day01</title>
      <link href="/2019/11/14/day01/"/>
      <url>/2019/11/14/day01/</url>
      
        <content type="html"><![CDATA[<h1 id="php7和php5之间的区别："><a href="#php7和php5之间的区别：" class="headerlink" title="php7和php5之间的区别："></a><strong>php7和php5之间的区别：</strong></h1><p>1、性能提升：PHP7比PHP5.0性能提升了两倍。</p><p>2、全面一致的64位支持。</p><p>3、以前的许多致命错误，现在改成抛出异常。</p><p>4、PHP 7.0比PHP5.0移除了一些老的不在支持的SAPI（服务器端应用编程端口）和扩展。</p><p>5、PHP 7.0比PHP5.0新增了空接合操作符。</p><p>6、PHP 7.0比PHP5.0新增加了结合比较运算符。</p><p>7、PHP 7.0比PHP5.0新增加了函数的返回类型声明。</p><p>8、PHP 7.0比PHP5.0新增加了标量类型声明。</p><p>9、PHP 7.0比PHP5.0新增加匿名类。</p><p><strong>为什么 PHP7 比 PHP5 性能提升了？</strong></p><p>1、变量存储字节减小，减少内存占用，提升变量操作速度</p><p>2、改善数组结构，数组元素和hash映射表被分配在同一块内存里，降低了内存占用、提升了 cpu 缓存命中率</p><p>3、改进了函数的调用机制，通过优化参数传递的环节，减少了一些指令，提高执行效率</p><p>路径</p><h1 id="lamp是什么？"><a href="#lamp是什么？" class="headerlink" title="lamp是什么？"></a>lamp是什么？</h1><p>LAMP是一个开源 Web开发平台，它使用Linux作为操作系统，Apache作为Web服务器，MySQL作为关系数据库管理系统，PHP作为面向对象的脚本语言。（有时使用Perl或Python代替PHP。）</p><p>因为平台具有四个层 ，LAMP有时被称为LAMP堆栈。堆栈可以构建在不同的操作系统上。据说使用这些工具与Windows操作系统而不是Linux的开发人员正在使用WAMP ; 使用Macintosh系统，MAMP; 和Solaris系统，SAMP。</p><p>AMP背后的理念的关键是，这个术语最初由Michael Kunze在1998年德国杂志c’t中创造，将这些物品一起使用。尽管实际上并不是为了协同工作而设计的，但这些开源软件替代品可以随时随地获得，因为LAMP堆栈中的每个组件都是免费或开源软件（FOSS）的一个例子。</p><p>LAMP已成为事实上的发展标准。今天，构成LAMP堆栈的产品默认包含在几乎所有Linux发行版中，并且它们共同构成了一个功能强大的Web应用程序平台。<br>最初的LAMP缩写产生了许多其他相关的首字母缩略词，这些首字母缩略词充分利用了原始技术组合的主要焦点，以提供功能丰富的网站。其中一些相关的Web堆栈包括LAPP，MAMP和BAMP。</p><p>有些人认为LAMP是：Linux，Apache，MySQL和Perl / PHP / Python。换句话说，解决方案堆栈中的脚本语言可以是Perl，PHP或Python。PHP是最流行的脚本语言，因此，在实践中，LAMP通常用于描述带有PHP语义的解决方案堆栈，主要思想是相同的 – LAMP是一个广泛使用的开源解决方案堆栈，被认为相对容易使用。</p><h1 id="Apache和nginx的区别"><a href="#Apache和nginx的区别" class="headerlink" title="Apache和nginx的区别"></a>Apache和nginx的区别</h1><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ol><li>轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源</li><li>抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。</li><li>nginx 处理静态文件好，静态处理性能比 apache 高三倍以上</li><li>nginx 的设计高度模块化，编写模块相对简单</li><li>nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题，apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃</li><li>nginx 作为负载均衡服务器，支持 7 层负载均衡</li><li>nginx 本身就是一个反向代理服务器，而且可以作为非常优秀的邮件代理服务器</li><li>启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动，还能够不间断服务的情况下进行软件版本的升级</li><li>社区活跃，各种高性能模块出品迅速</li></ol><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><ol><li>apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache</li><li>apache 发展到现在，模块超多，基本想到的都可以找到</li><li>apache 更为成熟，少 bug ，nginx 的 bug 相对较多</li><li>apache 超稳定</li><li>apache 对 PHP 支持比较简单，nginx 需要配合其他后端用</li><li>apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。</li><li>apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两者最核心的区别在于 apache 是同步多进程模型，一个连接对应一个进程，而 nginx 是异步的，多个连接（万级别）可以对应一个进程</p><p>一般来说，需要性能的 web 服务，用 nginx 。如果不需要性能只求稳定，更考虑 apache ，后者的各种功能模块实现得比前者，例如 ssl 的模块就比前者好，可配置项多。epoll(freebsd 上是 kqueue ) 网络 IO 模型是 nginx 处理性能高的根本理由，但并不是所有的情况下都是 epoll 大获全胜的，如果本身提供静态服务的就只有寥寥几个文件，apache 的 select 模型或许比 epoll 更高性能。当然，这只是根据网络 IO 模型的原理作的一个假设，真正的应用还是需要实测了再说的。</p><p>更为通用的方案是，前端 nginx 抗并发，后端 apache 集群，配合起来会更好。</p><h1 id="nextcloud的盈利方式"><a href="#nextcloud的盈利方式" class="headerlink" title="nextcloud的盈利方式"></a>nextcloud的盈利方式</h1><h2 id="一，卖网盘容量"><a href="#一，卖网盘容量" class="headerlink" title="一，卖网盘容量"></a><strong>一，卖网盘容量</strong></h2><p>网盘最终目的当然是赚钱。首先要有用户才能有客户，一个产品，不论多么完美、多么强大，没有用户，就相当于什么也没有。网盘空间大战（主要集中于个人网盘）是必然的，目的在于拉拢用户，有了一定的用户基数，才能开始下一步的计划。而企业网盘级网盘则采用免费一部分网盘+灵活增值扩容的模式。</p><h2 id="二，卖速度"><a href="#二，卖速度" class="headerlink" title="二，卖速度"></a><strong>二，卖速度</strong></h2><p>网盘中的东西，一定会被下载下来的，当然也有例外。下载速度就尤为重要了，纵然你有1000Mbps的带宽，网盘方面实施限速，下载速度依然会很慢，这样速度就可以作为商品来出售了。</p><h2 id="三，卖功能"><a href="#三，卖功能" class="headerlink" title="三，卖功能"></a><strong>三，卖功能</strong></h2><p>用户最终愿不愿意付费，还是取决于网盘的功能，看能否满足用户的发展需要。如果能满足，解决了用户的基本需求，那么即体现了网盘使用价值的意义。</p><h2 id="四，卖客户端"><a href="#四，卖客户端" class="headerlink" title="四，卖客户端"></a><strong>四，卖客户端</strong></h2><p>客户端不是卖给客户的，而是卖给广告主的。目前大多数网盘为何都能覆盖全平台（Web、PC、Android、iPhone、iPad、Mac），其一在于给更多的用户提供便利，其二在于获取更多的用户资源，其三有了一定的用户群体之后，可以做点别的什么，比如，广告之类的。（当然个人网盘可能会先有，企业网盘就不得而知了）</p><h2 id="五，增值业务"><a href="#五，增值业务" class="headerlink" title="五，增值业务"></a><strong>五，增值业务</strong></h2><p>这里增值业务主要指外链分享或单个文件上传大小限制，主要面向那些喜欢在网络中分享资源的人，像小型站长，因为网站的主机空间太贵，只能把大一点的图片或电子资源存放在其它位置。当需要分享更大的空间时，即可请用户付费。</p><h2 id="六，定制化"><a href="#六，定制化" class="headerlink" title="六，定制化"></a><strong>六，定制化</strong></h2><p>因大多数的网盘都是针对成千上万用户的，那么每个用户所用到的功能基本上都是一致的。但有的客户因资金或实力过硬，需要一套印有自己企业印记或者说与众不同的网盘功能，此时可以考虑私有云定制。目前市面上仅仅只有少数几家可以提供私有云定制服务，能够无缝集成OA、CRM、ERP等系统。</p><h2 id="七，总的来说"><a href="#七，总的来说" class="headerlink" title="七，总的来说"></a>七，总的来说</h2><p>，从个人角度看，网盘大多现在都还无法盈利，基本上都是亏本。那为什么还有这么多人做网盘？因为大家都免费，所以你也必须免费，既然免费甚至亏本那还要做？其实现在是在圈地，积累人气，人气够了，然后再盈利。</p><h1 id="vue-js发送cookie"><a href="#vue-js发送cookie" class="headerlink" title="vue.js发送cookie"></a>vue.js发送cookie</h1><p><img src="C:%5CUsers%5C15542%5CPictures%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191023075049.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Archive引擎</title>
      <link href="/2019/11/14/Archive%E5%BC%95%E6%93%8E/"/>
      <url>/2019/11/14/Archive%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Archive引擎"><a href="#1-Archive引擎" class="headerlink" title="1 Archive引擎"></a>1 Archive引擎</h2><p>Archive存储引擎只支持Insert和Select操作，在MySQL5.1之前也不支持索引。Archive引擎会缓存所有的写操作并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O少。但是每次select查询都需要执行全表扫描。所以Archive表适合日志和数据采集类应用，这类应用做数据分析时往往需要权标骚婊。或者在一些需要更快速的insert操作的场合下也可以使用。</p><p>Archive引擎支持行级锁和专用的缓冲区，所以可以实现高并发的插入。在一个查询开始直到返回表中存在的所有行数之前，Archive引擎会组织其他的select执行，以实现一致性读。另外，也实现了批量插入在完成之前对读操作是不可见的。这种机制模仿了事物和MVCC的一些特性，但Archive引擎不是一个事物型的引擎，而是一个针对高速插入和压缩做了优化的简单引擎。</p><h2 id="2-Blackhole引擎"><a href="#2-Blackhole引擎" class="headerlink" title="2 Blackhole引擎"></a>2 Blackhole引擎</h2><p>Blackhole引擎没有实现任何的存储机制，它会丢弃所有插入的数据，不做任何保存。但是服务器会记录Blackhole表的日志，所以可以用于赋值数据库到备库，或者只是简单的记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥作用。但这种应用方式会产生很多问题，因此不推荐。</p><h2 id="3-CSV引擎"><a href="#3-CSV引擎" class="headerlink" title="3 CSV引擎"></a>3 CSV引擎</h2><p>CSV引擎可以将普通的CSV文件（逗号分割值的文件）作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据库运行时拷入或拷出文件。可以将Excel等调子表格软件中的数据存储为CSV文件，然后复制到MySQL数据目录下，就能在MySQL中打开使用。同样，如果将数据写入到一个CSV引擎表，其他的外部程序也能立即从表的数据文件中读取CSV格式的数据。因此CSV引擎可以作为一种数据交换的机制，非常有用。</p><h2 id="4-Federated引擎"><a href="#4-Federated引擎" class="headerlink" title="4 Federated引擎"></a>4 Federated引擎</h2><p>Federated引擎是访问其他MySQL服务器的一个代理，它会创建一个到远程MySQL服务器的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。最初设计该存储引擎是为了和企业级数据库如Microsoft SQL Server和Oracle的类似特性竞争的，可以说更多的是一种市场行为。尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题，因此默认是禁用的。MariaDB使用了它的一个后续改进版本，叫做FederatedX。</p><h2 id="5-Memory引擎"><a href="#5-Memory引擎" class="headerlink" title="5 Memory引擎"></a>5 Memory引擎</h2><p>如果需要快速的访问数据，并且这些数据不会被修改，重启以后丢失也没有关系，那么使用Memory表（以前也叫HEAP表）是非常有用的。Memory表至少比MyISAM表要快一个数量级，因此所有的数据都保存在内存中，不需要进行磁盘I/O。Memory表的结构在重启以后还会保留，但数据会丢失。</p><p>Memroy的应用场景：</p><pre><code>① 用于查找（lookup）或者映射表，例如将邮编和城市名映射的表② 用于缓存周期性聚合数据（periodically aggregated data）的结果。③ 用于保存数据分析中产生的中间数据</code></pre><p>Memory表支持Hash索引，因此查找操作非常快。虽然Memory表的速度非常快，但还是无法取代传统的基于磁盘的表。Memroy表时表级锁，因此并发写入的性能较低。它不支持BLOB或TEXT类型的列，并且每行的长度是固定的所以即使制定了VARCHAR列，实际存储时也会转换成CHAR，这可能导致部分内存的浪费（其中一些限制在Percona版本中已解决）。</p><p>如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果太大超出了Memory表的限制，或者含有BLOB或TEXT字段 ，则临时表会转换成MyISAM表。</p><p>注：</p><p>人们经常混淆Memory表和临时表。临时表是指使用create temporary table 语句创建的表，它可以使用任何存储引擎，因此和Memory表不是一回事。临时表只在单个连接中可见，当连接断开时，临时表将删除。</p><h2 id="6-Merge引擎"><a href="#6-Merge引擎" class="headerlink" title="6 Merge引擎"></a>6 Merge引擎</h2><p>Merge引擎是MyISAM引擎的一个变种。Merge表时由多个MyISAM表合并而来的虚拟表。如果将MySQL用于日志或者数据仓库类应用，该引擎可以发挥作用。但是引入分区功能后，该引擎已经被放弃。</p><h2 id="7-NDB集群引擎"><a href="#7-NDB集群引擎" class="headerlink" title="7 NDB集群引擎"></a>7 NDB集群引擎</h2><p>2003年时MySQL AB公司从索尼爱立信公司收购了NDB数据库，然后开发了NDB集群存储引擎，作为SQL和NDB原生协议之间的接口。MySQL服务器、NDB集群存储引擎，以及分布式的、share-nothing的容灾的、高可用的NDB数据库的组合，被从未MySQL集群（MySQL Cluster）。后面应该会单独写一篇文章来详细讲解MySQL集群</p><h2 id="1-OLTP类引擎"><a href="#1-OLTP类引擎" class="headerlink" title="1 OLTP类引擎"></a>1 OLTP类引擎</h2><p>Percona的XtraDB存储引擎是基于InnoDB引擎的一个改进版本，已经包含在Percona Server和MariaDB中，它的改进点主要集中在性能、可测量性和操作灵活性方面。XtraDB可以作为InnoDB的一个完全的替代产品，甚至可以兼容的读写InnoDB的数据文件，并支持InnoDB的所有查询。</p><p>另外还有一些和InnoDB非常类似的OLTP类存储引擎，比如都支持ACID事物和MVCC。其中一个就是PBXT，由PaulMcCullagh和Primebase GMBH开发。它支持引擎级别的赋值、外键约束，并且一一种比较复杂的架构对固态存储（SSD）提供了适当的支持，还对较大的值类型如BLOB也做了优化。PBXT是一款社区支持的存储引擎，MariaDB包含了该引擎。</p><p>TokuDB引擎使用了一种新的叫做分型树（Fractal Trees）的索引数据结构。该结构是缓存无关的，因此即使其大小超过内存，性能也不会下降，也就没有内存生命周期和碎片的问题。TokuDB是一种大数据（Big Data）存储引擎，因为其拥有很高的压缩比，可以在很大的数据量上创建大量索引。</p><p>RethinkDB最初是为固态存储（SSD）而设计的，然而随着时间的推移，目前看起来和最初的目标有一定的差距。该引擎比较特别的地方在于采用了一种智能追加的写时复制B树（append-only copyon-write B-Tree）作为索引的数据结构。</p><p>在Sun收购了MySQL AB以后，Falcon存储引擎曾经作为下一代存储引擎被寄予期望，但现在该项目已经在很久以前就被取消了。</p><h3 id="2-面向列的存储引擎"><a href="#2-面向列的存储引擎" class="headerlink" title="2 面向列的存储引擎"></a>2 面向列的存储引擎</h3><p>MySQL默认是面向行的，每一行的数据时一起存储的，服务器的传也是以行为单位处理的。而在大数据量处理时，可能面向列的方式效率更高。如果不需要整行的数据，面向列的方式可以传输更少的数据。如果每一列都单独村吃醋，那么压缩的效率也会更高。I</p><p>Infobright是最有名的面向列的存储引擎。在非常大的数据量时（数十TB），该引擎工作良好。Infobright是为数据分析和数据仓库应用设计的。数据高度压缩，按照块进行排序，每个块都对应有一组员数据。在处理查询时，访问元数据可以决定跳过该块进行排序，每个块都对应有一组元数据。在处理查询时，访问元数据可决定跳过该块，甚至可能只需要元数据就可以满足查询的需求。但该引擎不支持索引，不过在这么大的数据量级，即使有索引页很难发挥作用，而且块结构也会一种准索引（quasi-index）。Infobright需要对MySQL服务器做定制，因为一些地方需要修改以适应面向列的存储需要。如果查询无法在存储层使用面向列的模式执行，则需要在服务器层转换成按行处理，这个过程会很慢。Infobright有社区版和商业版两种。</p><p>另外一个面向列的存储引擎是Calpont公司的InfiniDB，也有社区版和商业版。InfiniDB可以在一组机器集群间做分布式查询，但目前还没有哦生产环境的应用案例。</p><h4 id="3-社区存储引擎"><a href="#3-社区存储引擎" class="headerlink" title="3 社区存储引擎"></a>3 社区存储引擎</h4><p>如果要列举所有社区提供的引擎可能会有三位数。但是很大部分影响力有限，只有极少数人在使用。在这里举例一些，但都没有在生产环境中应用过，慎用。</p><p>① Aria：之前的名字是Maria，是MySQL创建者计划用来替代MyISAM的一款引擎。MariaDB包含了该引擎，之前计划开发的很多特性因为在MariaDB服务层实现，所以引擎层就取消了。在2013~2014年Aria就是解决了MyISAM的崩溃安全回复问题，当然还有一些特性是MyISAM不具备的，例如 数据的缓存（MyISAM只能缓存索引）。</p><p>② Groonga：这是一款全文索引引擎，号称可以提供准确而高效的全文索引。</p><p>③ OQGraph：该引擎由uOpen Query研发，支持图操作（例如查找两点之间最短的路径），用SQL很难实现该类操作。</p><p>④ Q4M：该引擎在MySQL内部实现了队列操作，这也是SQL很难实现的操作。</p><p>⑤ SphinxSE：该引擎为Sphinx全文索引搜索服务提供了SQL接口。</p><p>⑥ Spider：该引擎可以将数据切分成不同的分区，比较高效透明的实现了分片（shard），并且可以针对分片执行并行查询（可以是分布式的分片）。</p><p>⑦ VPForMySQL：改引擎支持垂直分区，通过一系列的代理存储引擎是新。垂直分区指的是可以将表分成不同列的这，并且单独存储。但对于查询来说，看到的还是一张表。改引擎和Spider的作者是同一人。</p><h3 id="转换表的引擎"><a href="#转换表的引擎" class="headerlink" title="转换表的引擎"></a>转换表的引擎</h3><p>下面接受三种Mysql 数据库将表的存储引擎转换成另外一种引擎。每种方法都有优缺点。</p><p>ALTER TABLE<br>将表的一个引擎修改为另个引擎最简单的办法就是是用alter table 语句，下面是修改user 表的储存引擎；</p><p>mysql&gt; alter table user engine=InnoDB;<br>Query OK, 0 rows affected (0.07 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br>mysql&gt; show table status like ‘user’ \G;<br>1<br>2<br>3<br>4<br>上述语法可以适合任何储存引擎。但是有一个问题：需要执行很长时间。Mysql会按行讲源数据复制到另一新表当中，在复制期间可能会消耗系统所有的I/O能力，同时原表会加上锁。所以在繁忙的表上执行此操作要下心。<br>如果转换表的存储引擎将会丢失和原引擎相关的所有特性。如，将一张InnoDB表转换为MyISAM，然后转换InnoDB，原InnoDB上的所有外键将会丢失。</p><p>导入和导出<br>为了更好的控制转换过程，可是使用mysqldump 工具将数据导入文件中，然后修改文件中的create table 语句中的存储引擎选项，mysqldump 工具默认会在create table 中加上drop 语句。</p><p>创建和查询<br>第三种装换技术综合了第一种的高效和第二种方法的中的安全，不需要导出真个表的数据。而是先创建一个新的存储引擎的表。然后利用 Insert 。。。。select 语句来导出，</p><p>mysql&gt; create table myInnoDB like user;<br>Query OK, 0 rows affected (0.04 sec)</p><p>mysql&gt; alter table myInnoDB engine=innodb;<br>Query OK, 0 rows affected (0.08 sec)<br>Records: 0  Duplicates: 0  Warnings: 0</p><p>mysql&gt; insert into myInnoDB select * from user;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/21/hello-world/"/>
      <url>/2019/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2018/03/24/Python/"/>
      <url>/2018/03/24/Python/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h2><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。<br>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><blockquote><p>时间复杂度：O(n²)<br>空间复杂度：O(1)<br>稳定性：稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(blist)</span>:</span></span><br><span class="line">    count = len(blist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> blist[i] &gt; blist[j]:</span><br><span class="line">                blist[i], blist[j] = blist[j], blist[i]</span><br><span class="line">    <span class="keyword">return</span> blist</span><br><span class="line"></span><br><span class="line">blist = bubble_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line">print(blist)</span><br></pre></td></tr></table></figure><h2 id="快排："><a href="#快排：" class="headerlink" title="快排："></a>快排：</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><blockquote><p>时间复杂度：O(nlog₂n)<br>空间复杂度：O(nlog₂n)<br>稳定性：不稳定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#O(n*(log n))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(array) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = array[<span class="number">0</span>]    <span class="comment">#找到一个基准值</span></span><br><span class="line">        <span class="comment">#遍历整个列表，将小于这个基准值的元素放到一个子列表中</span></span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; pivot]</span><br><span class="line">        <span class="comment">#遍历整个列表，将大于这个基准值的元素放到一个子列表中</span></span><br><span class="line">        greater = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i&gt;pivot]</span><br><span class="line">        <span class="comment">#首先，明确我们对元素为0个/1个的列表无需要排序</span></span><br><span class="line">        <span class="comment">#使用函数递归</span></span><br><span class="line">        <span class="comment">#目标：让我们在一个基准值的一侧变为有序，然后依次返回，让我们的每个基准值的两侧都变得有序</span></span><br><span class="line">        <span class="keyword">return</span> quicksort(less)+[pivot]+quicksort(greater)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这是一些测试样例</span></span><br><span class="line">print(quicksort([<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">11</span>]))</span><br><span class="line">print(quicksort([<span class="number">152</span>,<span class="number">134</span>,<span class="number">38796</span>,<span class="number">7438415</span>,<span class="number">1</span>,<span class="number">2272</span>,<span class="number">34345</span>,<span class="number">24</span>,<span class="number">127</span>]))</span><br></pre></td></tr></table></figure><h2 id="单例："><a href="#单例：" class="headerlink" title="单例："></a>单例：</h2><p>保证一个类只有一个实例，并提供一个访问它的全局访问点</p><p><strong>优点：对唯一实例的受控访问，相当于全局变量，但是又可以防止变量被篡改</strong></p><blockquote><p>通过<strong>new</strong>方法，将类的实例在创建的时候绑定到类属性_inst上。<br>如果cls._inst为None，说明类还未实例化，实例化并将实例绑定到cls._inst，以后每次实例化的时候都返回第一次实例化创建的实例。注意从Singleton派生子类的时候，不要重载<strong>new</strong>。<br>因为类每一次实例化后产生的过程都是通过<strong>new</strong>来控制的，所以通过重载<strong>new</strong>方法，我们 可以很简单的实现单例模式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = object.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">single1 = Single()</span><br><span class="line">single2 = Single()</span><br><span class="line">print(id(single1) , id(single2))</span><br></pre></td></tr></table></figure><h4 id="new-方法"><a href="#new-方法" class="headerlink" title="_ _ new _ _方法:"></a>_ _ new _ _方法:</h4><p>使用类名()创建对象时，Python的解释器首先会调用<strong>new</strong>方法为对象分配空间.<br>_ _ new _ _是一个有object基类提供的内置的静态方法，主要作用有两个：</p><ol><li>在内存中为对象分配空间</li><li>返回对象的引用<br>Python的解释器获得对象的引用后，将引用作为第一个参数，传递给<strong>init</strong>方法。<br>重写<strong>new</strong>方法的代码非常固定。<br>重写<strong>new</strong>方法一定要return super.<strong>new</strong>(cls)，否则Python的解释器得不到分配了空间的对象引用，就不会调用对象的初始化方法<br>注意：<strong>new</strong>是一个静态方法，在调用时需要主动传递参数cls<br><strong>new</strong>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供</li></ol><h2 id="递归斐波那契数列："><a href="#递归斐波那契数列：" class="headerlink" title="递归斐波那契数列："></a>递归斐波那契数列：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fun(i<span class="number">-2</span>) + fei(i<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(fun(i),end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><h2 id="递归遍历目录："><a href="#递归遍历目录：" class="headerlink" title="递归遍历目录："></a>递归遍历目录：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(p)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(p):</span><br><span class="line">        i = os.path.join(p,i)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(i):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> fun(i)</span><br><span class="line">            <span class="keyword">if</span> os.path.splitext(i)[<span class="number">1</span>] == <span class="string">'.txt'</span>:</span><br><span class="line">                <span class="keyword">print</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> fun(i)</span><br><span class="line"></span><br><span class="line">path = unicode(<span class="string">r'F:\My Study\linux学习笔记\test'</span>,<span class="string">'utf-8'</span>)   <span class="comment">#需要遍历的目录</span></span><br><span class="line">f(path)</span><br></pre></td></tr></table></figure><h2 id="青蛙跳台阶参考链接："><a href="#青蛙跳台阶参考链接：" class="headerlink" title="青蛙跳台阶参考链接："></a>青蛙跳台阶参考链接：</h2><p><a href="https://blog.csdn.net/Bryce_Liu/article/details/90639516" target="_blank" rel="noopener">https://blog.csdn.net/Bryce_Liu/article/details/90639516</a></p><h2 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h2><p><strong>闭包的定义：</strong></p><ol><li>在一个外函数中定义了一个内函数</li><li>内函数里运用了外函数的临时变量</li><li>并且外函数的返回值是内函数的引用。<br>这样就构成了一个闭包。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        b = a + <span class="number">10</span></span><br><span class="line">        print(<span class="string">"b ="</span>,b)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">outer()()</span><br></pre></td></tr></table></figure><h2 id="装饰器测试程序运行时间："><a href="#装饰器测试程序运行时间：" class="headerlink" title="装饰器测试程序运行时间："></a>装饰器测试程序运行时间：</h2><blockquote><p>使用装饰器测试（1000以内的三个数，相加等于1000的情况，有多少组）这个案例的运行时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        s_time = time.time() <span class="comment">#获取程序运行的开始时间</span></span><br><span class="line">        fun()    <span class="comment">#运行程序</span></span><br><span class="line">        e_time = time.time() <span class="comment">#获取程序运行的结束时间</span></span><br><span class="line">        <span class="keyword">return</span> e_time-s_time</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="meta">@time_</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1001</span>):</span><br><span class="line">            c = <span class="number">1000</span> - a - b</span><br><span class="line">            <span class="keyword">if</span> a ** <span class="number">2</span> + b ** <span class="number">2</span> == c ** <span class="number">2</span>:</span><br><span class="line">                print(<span class="string">"a = %d , b = %d , c = %d"</span> % (a,b,c)</span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(func())</span><br></pre></td></tr></table></figure><h2 id="python实现树的遍历："><a href="#python实现树的遍历：" class="headerlink" title="python实现树的遍历："></a>python实现树的遍历：</h2><p>参考链接：<br><a href="https://blog.csdn.net/bone_ace/article/details/46718683" target="_blank" rel="noopener">https://blog.csdn.net/bone_ace/article/details/46718683</a></p><p>广度遍历：层次遍历<br>深度遍历：先、中、后序遍历</p><p>层次遍历：一层一层的遍历<br>先序遍历：依据 根–左–右 的顺序遍历<br>中序遍历：依据 左–根–右 的顺序遍历<br>后序遍历：依据 左–右–根 的顺序遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''树的节点'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.elem = item</span><br><span class="line">        self.lchild = <span class="literal">None</span>  <span class="comment">#左孩子</span></span><br><span class="line">        self.rchild = <span class="literal">None</span>  <span class="comment">#右孩子</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''二叉树'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="literal">None</span>    <span class="comment"># 根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="string">'''添加的方法'''</span></span><br><span class="line">        node = Node(item)   <span class="comment"># 先构造一个节点</span></span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment">#     如果是空树 直接添加元素</span></span><br><span class="line">            self.root = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        queue = [self.root]  <span class="comment"># 一个队列 用来存放的就是要遍历和处理的元素</span></span><br><span class="line">        <span class="keyword">while</span> queue:    <span class="comment">#队列只要不为空 就始终能拿出节点进行判断</span></span><br><span class="line">            <span class="comment"># 先从队列中取出一个节点</span></span><br><span class="line">            cur_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 看当前这个节点左边的孩子是否为空 如果是空 直接挂节点</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.lchild <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                cur_node.lchild = node</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 不为空则认定左孩子存在 追加到队列</span></span><br><span class="line">                queue.append(cur_node.lchild)</span><br><span class="line">            <span class="comment"># 查看节点右孩子 与左孩子同理</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.rchild <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                cur_node.rchild = node</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                queue.append(cur_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">breadth_trvael</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''层次遍历'''</span></span><br><span class="line">        <span class="keyword">if</span> self.root == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        queue = [self.root]</span><br><span class="line">        <span class="keyword">while</span> queue:    <span class="comment"># 只要队列不为空就一直取元素</span></span><br><span class="line">            cur_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            print(cur_node.elem,end=<span class="string">' '</span>)</span><br><span class="line">            <span class="comment"># 如果左孩子存在 添加到队列中</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.lchild:</span><br><span class="line">                queue.append(cur_node.lchild)</span><br><span class="line">            <span class="comment"># 右孩子同理</span></span><br><span class="line">            <span class="keyword">if</span> cur_node.rchild:</span><br><span class="line">                queue.append(cur_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, node)</span>:</span>   <span class="comment">#传一个根节点</span></span><br><span class="line">        <span class="string">'''先序遍历'''</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:    <span class="comment">#递归的终结条件</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(node.elem,end=<span class="string">' '</span>)    <span class="comment">#先打印根</span></span><br><span class="line">        self.preorder(node.lchild)  <span class="comment">#处理左半部分</span></span><br><span class="line">        self.preorder(node.rchild)  <span class="comment">#处理右半部分</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''中序遍历'''</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.inorder(node.lchild)  <span class="comment"># 先处理左部分</span></span><br><span class="line">        print(node.elem, end=<span class="string">' '</span>)   <span class="comment">#输出根</span></span><br><span class="line">        self.inorder(node.rchild)  <span class="comment">#再处理右半部分</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">'''后序遍历'''</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.postorder(node.lchild)  <span class="comment"># 先处理左部分</span></span><br><span class="line">        self.postorder(node.rchild)  <span class="comment"># 然后处理右半部分</span></span><br><span class="line">        print(node.elem, end=<span class="string">' '</span>)   <span class="comment"># 最后输出根</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tree = Tree()</span><br><span class="line">    <span class="comment"># 添加元素</span></span><br><span class="line">    tree.add(<span class="number">0</span>)</span><br><span class="line">    tree.add(<span class="number">1</span>)</span><br><span class="line">    tree.add(<span class="number">2</span>)</span><br><span class="line">    tree.add(<span class="number">3</span>)</span><br><span class="line">    tree.add(<span class="number">4</span>)</span><br><span class="line">    tree.add(<span class="number">5</span>)</span><br><span class="line">    tree.add(<span class="number">6</span>)</span><br><span class="line">    tree.add(<span class="number">7</span>)</span><br><span class="line">    tree.add(<span class="number">8</span>)</span><br><span class="line">    tree.add(<span class="number">9</span>)</span><br><span class="line">    print(<span class="string">'层次遍历：'</span>)</span><br><span class="line">    tree.breadth_trvael()</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line">    print(<span class="string">'先序遍历：'</span>)</span><br><span class="line">    tree.preorder(tree.root)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line">    print(<span class="string">'中序遍历：'</span>)</span><br><span class="line">    tree.inorder(tree.root)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line">    print(<span class="string">'后序遍历：'</span>)</span><br><span class="line">    tree.postorder(tree.root)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><h2 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h2><p>参考链接：<br><a href="https://www.jianshu.com/p/9f2aca048c84" target="_blank" rel="noopener">https://www.jianshu.com/p/9f2aca048c84</a><br><a href="https://www.jb51.net/article/133798.htm" target="_blank" rel="noopener">https://www.jb51.net/article/133798.htm</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''节点类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elem)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''单链表'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span></span><br><span class="line">        self.head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''判断链表是否为空'''</span></span><br><span class="line">        <span class="keyword">return</span> self.head == <span class="literal">None</span>    <span class="comment">#如果头节点为空 列表就为空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''链表长度'''</span></span><br><span class="line">        cur = self.head <span class="comment">#cur游标 用来移动遍历节点</span></span><br><span class="line">        count = <span class="number">0</span>        <span class="comment">#记录数量</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.next    <span class="comment">#移动游标</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''遍历整个链表'''</span></span><br><span class="line">        cur = self.head <span class="comment">#代表第一个节点</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            print(cur.elem)</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">'''在链表头部添加元素，头插法'''</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.next = self.head   <span class="comment"># 新元素的下一个节点指向链表第一个元素</span></span><br><span class="line">        self.head = node    <span class="comment">#头节点指向新元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">'''向链表的尾部添加元素,尾插法'''</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty(): <span class="comment">#如果链表为空</span></span><br><span class="line">            self.head = node    <span class="comment">#头节点指向添加的元素</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment">#不为空</span></span><br><span class="line">            cur = self.head     <span class="comment"># 游标</span></span><br><span class="line">            <span class="keyword">while</span> cur.next != <span class="literal">None</span>: <span class="comment"># 游标下一个位置不为空开始进入循环 为空则不进入循环</span></span><br><span class="line">                cur = cur.next  <span class="comment"># 游标移动</span></span><br><span class="line">            cur.next = node <span class="comment">#当游标下一位置为空时添加元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span>    <span class="comment"># 传入一个插入位置pos 一个插入元素item</span></span><br><span class="line">        <span class="string">'''指定位置添加元素'''</span></span><br><span class="line">        <span class="comment"># 如果添加位置在头部 直接使用头插入方法</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span> :</span><br><span class="line">            self.add(item)</span><br><span class="line">        <span class="keyword">elif</span> pos &gt; (self.length()<span class="number">-1</span>):   <span class="comment">#插入位置超出列表范围 使用尾插法</span></span><br><span class="line">            self.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self.head</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> count &lt; (pos<span class="number">-1</span>):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                cur = cur.next</span><br><span class="line">            <span class="comment"># 当循环退出后cur指向 pos-1位置</span></span><br><span class="line">            node = Node(item)</span><br><span class="line">            node.next = cur.next</span><br><span class="line">            cur.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">'''删除元素,根据具体的数据删除'''</span></span><br><span class="line">        cur = self.head</span><br><span class="line">        pre = <span class="literal">None</span>    <span class="comment"># 前一位置</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="comment"># 先判断子节点是否为头节点</span></span><br><span class="line">                <span class="keyword">if</span> cur == self.head:</span><br><span class="line">                    self.head = cur.next <span class="comment"># 直接改变头指针指向的地址</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.next = cur.next <span class="comment"># 如果删除尾部 cur.next刚好指向none</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">'''查找节点是否存在'''</span></span><br><span class="line">        cur = self.head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:  <span class="comment"># 列表不为空时</span></span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ll = SingleLinkList()</span><br><span class="line">    print(<span class="string">'是否为空:'</span>,ll.is_empty())</span><br><span class="line">    print(<span class="string">'链表长度：'</span>,ll.length())</span><br><span class="line">    <span class="comment"># 添加元素</span></span><br><span class="line">    ll.append(<span class="number">2</span>)    <span class="comment">#尾部添加</span></span><br><span class="line">    ll.append(<span class="number">6</span>)</span><br><span class="line">    ll.add(<span class="number">8</span>)   <span class="comment">#头部添加</span></span><br><span class="line">    ll.append(<span class="number">1</span>)</span><br><span class="line">    ll.insert(<span class="number">3</span>,<span class="number">9</span>)</span><br><span class="line">    print(<span class="string">'开始遍历链表元素：'</span>)</span><br><span class="line">    ll.travel()</span><br><span class="line">    <span class="comment"># 删除一个元素</span></span><br><span class="line">    ll.remove(<span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'删除后遍历：'</span>)</span><br><span class="line">    ll.travel()</span><br><span class="line">    print(<span class="string">'是否为空:'</span>,ll.is_empty())</span><br><span class="line">    print(<span class="string">'链表长度：'</span>,ll.length())</span><br><span class="line">    print(<span class="string">'元素是否存在：'</span>,ll.search(<span class="number">10</span>))</span><br><span class="line">    print(<span class="string">'元素是否存在：'</span>,ll.search(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h2 id="栈与队列："><a href="#栈与队列：" class="headerlink" title="栈与队列："></a>栈与队列：</h2><p>参考链接：<br><a href="https://blog.csdn.net/yushupan/article/details/82312819" target="_blank" rel="noopener">https://blog.csdn.net/yushupan/article/details/82312819</a><br><a href="https://www.jianshu.com/p/1327cc0de255" target="_blank" rel="noopener">https://www.jianshu.com/p/1327cc0de255</a></p><p><strong>栈和队列是两种基本的数据结构，同为容器类型。</strong></p><ul><li>两者根本的区别在于： </li><li>栈stack:后进先出</li><li>队列queue:先进先出</li></ul><h4 id="栈的构造："><a href="#栈的构造：" class="headerlink" title="栈的构造："></a>栈的构造：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Stack() 创建一个新的空栈</span></span><br><span class="line"><span class="string">push(item) 添加一个新的元素item到栈顶</span></span><br><span class="line"><span class="string">pop() 弹出栈顶元素</span></span><br><span class="line"><span class="string">peek() 返回栈顶元素</span></span><br><span class="line"><span class="string">is_empty() 判断栈是否为空</span></span><br><span class="line"><span class="string">size() 返回栈的元素个数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""栈类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个空栈"""</span></span><br><span class="line">        self.stack = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="string">"""添加一个新的元素到栈顶"""</span></span><br><span class="line">        self.stack.append(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""弹出栈顶元素"""</span></span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回栈顶元素"""</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""判断栈是否为空"""</span></span><br><span class="line">        <span class="keyword">return</span> self.stack == []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回栈元素的个数"""</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stack)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Stack()</span><br><span class="line">    print(s.is_empty())</span><br><span class="line">    print(s.size())</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line">    s.push(<span class="number">2</span>)</span><br><span class="line">    s.push(<span class="number">6</span>)</span><br><span class="line">    s.push(<span class="number">3</span>)</span><br><span class="line">    print(s.stack)</span><br><span class="line">    print(s.pop())</span><br><span class="line">    print(s.size())</span><br><span class="line">    print(s.pop())</span><br><span class="line">    print(s.size())</span><br><span class="line">    print(s.pop())</span><br><span class="line">    print(s.size())</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line">    print(s.is_empty())</span><br><span class="line">    print(s.size())</span><br></pre></td></tr></table></figure><h4 id="队列的构造："><a href="#队列的构造：" class="headerlink" title="队列的构造："></a>队列的构造：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Queue() 创建一个空的队列</span></span><br><span class="line"><span class="string">enqueue(item) 往队列中添加一个item元素</span></span><br><span class="line"><span class="string">dequeue() 从队列头部删除一个元素</span></span><br><span class="line"><span class="string">is_empty() 判断一个队列是否为空</span></span><br><span class="line"><span class="string">size() 返回队列的大小</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""队列"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个空队列"""</span></span><br><span class="line">        self.queue = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="string">"""往队列中添加一个元素"""</span></span><br><span class="line">        self.queue.append(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""从队列头部删除一个元素"""</span></span><br><span class="line">        <span class="keyword">return</span> self.queue.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ie_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""判断一个队列是否为空"""</span></span><br><span class="line">        <span class="keyword">return</span> self.queue == []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回队列大小"""</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    print(q.ie_empty())</span><br><span class="line">    print(q.size())</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line">    q.enqueue(<span class="number">5</span>)</span><br><span class="line">    q.enqueue(<span class="number">6</span>)</span><br><span class="line">    q.enqueue(<span class="number">7</span>)</span><br><span class="line">    print(q.dequeue())</span><br><span class="line">    print(q.size())</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line">    print(q.dequeue())</span><br><span class="line">    print(q.size())</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">10</span>)</span><br><span class="line">    print(q.dequeue())</span><br><span class="line">    print(q.ie_empty())</span><br><span class="line">    print(q.size())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
